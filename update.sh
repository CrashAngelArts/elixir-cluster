#!/bin/bash

# Definir cores para output
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m' # Sem cor

# Fun√ß√£o para imprimir mensagens coloridas
print_status() {
    echo -e "${GREEN}[‚úì]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[!]${NC} $1"
}

print_error() {
    echo -e "${RED}[‚úó]${NC} $1"
}

# Verificar se est√° em um reposit√≥rio git
if [ ! -d .git ]; then
    print_error "N√£o √© um reposit√≥rio git"
    exit 1
fi

# Salvar altera√ß√µes locais (opcional)
print_warning "Salvando poss√≠veis altera√ß√µes locais..."
git add .

# Perguntar por mensagem de commit
read -p "Mensagem de commit (deixe em branco para 'Update'): " commit_message
if [ -z "$commit_message" ]; then
    commit_message="Update $(date '+%Y-%m-%d %H:%M:%S')"
fi

# Commitar altera√ß√µes
git commit -m "$commit_message"

# Atualizar reposit√≥rio
print_status "Buscando atualiza√ß√µes remotas..."
git fetch origin

# Fazer merge ou rebase
read -p "Deseja fazer merge (M) ou rebase (R)? [M/R]: " merge_choice
case $merge_choice in
    [Rr]* )
        print_status "Realizando rebase..."
        git pull --rebase origin main
        ;;
    * )
        print_status "Realizando merge..."
        git pull origin main
        ;;
esac

# Enviar altera√ß√µes
print_status "Enviando altera√ß√µes para o reposit√≥rio remoto..."
git push origin main

# Mostrar status final
print_status "Reposit√≥rio atualizado com sucesso! üöÄ"
git status
